<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-13T17:41:11+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">NexT</title><subtitle>Elegant theme for Jekyll.</subtitle><author><name>John Doe</name></author><entry><title type="html">iTerm2 + Oh My Zsh 打造舒适终端体验</title><link href="http://localhost:4000/2020/03/24/iterm2-with-oh-my-zsh%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C-%E8%BD%AC%E8%BD%BD/" rel="alternate" type="text/html" title="iTerm2 + Oh My Zsh 打造舒适终端体验" /><published>2020-03-24T00:00:00+08:00</published><updated>2020-03-24T00:00:00+08:00</updated><id>http://localhost:4000/2020/03/24/iterm2-with-oh-my-zsh%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C(%E8%BD%AC%E8%BD%BD)</id><content type="html" xml:base="http://localhost:4000/2020/03/24/iterm2-with-oh-my-zsh%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C-%E8%BD%AC%E8%BD%BD/">&lt;h1 id=&quot;iterm2--oh-my-zsh-打造舒适终端体验&quot;&gt;iTerm2 + Oh My Zsh 打造舒适终端体验&lt;/h1&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;

&lt;p&gt;最终效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文严重抄袭自：https://www.jianshu.com/p/7de00c73a2bb&lt;/p&gt;

&lt;p&gt;因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。&lt;/p&gt;

&lt;p&gt;因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。&lt;/p&gt;

&lt;p&gt;另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：&lt;/p&gt;

&lt;p&gt;https://git-scm.com&lt;/p&gt;

&lt;p&gt;介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。&lt;/p&gt;

&lt;h3 id=&quot;下载iterm2&quot;&gt;下载iTerm2&lt;/h3&gt;

&lt;p&gt;可以直接去官网下载：https://www.iterm2.com/&lt;/p&gt;

&lt;p&gt;安装完成后，在/bin目录下会多出一个zsh的文件。&lt;/p&gt;

&lt;p&gt;Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想修改回默认dash，同样使用chsh命令即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/1.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装oh-my-zsh&quot;&gt;安装Oh my zsh&lt;/h3&gt;

&lt;p&gt;安装方法有两种，可以使用curl或wget，看自己环境或喜好：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# curl 安装方式&lt;/span&gt;
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# wget 安装方式&lt;/span&gt;
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装命令和安装完成后的截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/2.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;oh-my-zsh开源地址：https://github.com/robbyrussell/oh-my-zsh&lt;/p&gt;

&lt;h3 id=&quot;安装powerline&quot;&gt;安装PowerLine&lt;/h3&gt;

&lt;p&gt;Powerline是agnoster主题的依赖。具体可以在repo里查询到：
https://github.com/agnoster/agnoster-zsh-theme&lt;/p&gt;

&lt;p&gt;powerline官网：http://powerline.readthedocs.io/en/latest/installation.html&lt;/p&gt;

&lt;p&gt;安装powerline的方式依然简单，也只需要一条命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install powerline-status &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;没有安装pip的同学可能会碰到zsh: command not found: pip。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/3.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用命令安装pip即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;easy_install pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装后再次执行安装powerline的命令即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/4.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装powerfonts&quot;&gt;安装PowerFonts&lt;/h3&gt;

&lt;p&gt;安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。&lt;/p&gt;

&lt;p&gt;在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/5.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在此文件夹下执行git clone命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# git clone&lt;/span&gt;
git clone https://github.com/powerline/fonts.git &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;c&quot;&gt;# cd to folder&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fonts
&lt;span class=&quot;c&quot;&gt;# run install shell&lt;/span&gt;
./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/6.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/7.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装配色方案&quot;&gt;安装配色方案&lt;/h3&gt;

&lt;p&gt;配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。&lt;/p&gt;

&lt;p&gt;同样使用git clone的方式下载源码进行安装：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Desktop/OpenSource
git clone https://github.com/altercation/solarized
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;solarized/iterm2-colors-solarized/
open &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/8.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次进入iTerm2 -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Colors -&amp;gt; Color Presets中根据个人喜好选择这两种配色中的一种即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/9.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装主题&quot;&gt;安装主题&lt;/h3&gt;

&lt;p&gt;下载agnoster主题，执行脚本安装：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Desktop/OpenSource
git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;oh-my-zsh-agnoster-fcamblor/
./install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行上面的命令会将主题拷贝到oh my zsh的themes中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/10.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/11.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。&lt;/p&gt;

&lt;p&gt;此时command+Q或source配置文件后，iTerm2变了模样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/12.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装高亮插件&quot;&gt;安装高亮插件&lt;/h3&gt;

&lt;p&gt;这是oh my zsh的一个插件，安装方式与theme大同小异：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.oh-my-zsh/custom/plugins/
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/13.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。&lt;/p&gt;

&lt;p&gt;然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/p&gt;

&lt;p&gt;按一下esc调出vi命令，输入:wq保存并退出vi模式。&lt;/p&gt;

&lt;p&gt;执行命令使刚才的修改生效：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此大功告成，请看最终效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：&lt;/p&gt;

&lt;p&gt;https://pan.baidu.com/s/1LKd4ghGyyNI6UwHhOHvfaA
提取码: snrd&lt;/p&gt;

&lt;p&gt;更换背景图片方式：iTerm2 -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Window -&amp;gt; BackGround Image勾选图片即可。&lt;/p&gt;

&lt;h4 id=&quot;可选择命令补全&quot;&gt;可选择、命令补全&lt;/h4&gt;

&lt;p&gt;跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.oh-my-zsh/custom/plugins/
git clone https://github.com/zsh-users/zsh-autosuggestions
vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到plugins，加上这个插件即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/15.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;插件效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/16.png&quot; alt=&quot;ImageInitIterm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有同学说补全命令的字体不太清晰，与背景颜色太过相近，其实可以自己调整一下字体颜色。&lt;/p&gt;

&lt;p&gt;Preferences -&amp;gt; Profiles -&amp;gt; Colors 中有Foreground是标准字体颜色，ANSI Colors中Bright的第一个是补全的字体颜色。&lt;/p&gt;</content><author><name>YL</name></author><category term="iTerm2" /><category term="Oh my Zsh" /><summary type="html">iTerm2 + Oh My Zsh 打造舒适终端体验</summary></entry><entry><title type="html">jekyll debug</title><link href="http://localhost:4000/2020/03/24/jekyll%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/" rel="alternate" type="text/html" title="jekyll debug" /><published>2020-03-24T00:00:00+08:00</published><updated>2020-03-24T00:00:00+08:00</updated><id>http://localhost:4000/2020/03/24/jekyll%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2</id><content type="html" xml:base="http://localhost:4000/2020/03/24/jekyll%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/">&lt;h2 id=&quot;jekll-本地调试博客页面&quot;&gt;jekll 本地调试博客页面&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;解决每一篇博客都要同步到github上，然后才可以渲染查看页面的不便，需要在本地更新完博客之后，就可以预览和调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装jekyll的先决条件&quot;&gt;安装jekyll的先决条件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby 2.4.0 或更高版本，包含所有用于开发的头文件（可通过* 执行 ruby -v 指令检查 ruby 版本）&lt;/li&gt;
  &lt;li&gt;RubyGems （可通过执行 gem -v 指令检查版本）&lt;/li&gt;
  &lt;li&gt;GCC and Make （以防你的系统中没有安装这些工具，请通过执行 gcc -v,g++ -v 和 make -v 指令进行检查，gcc 需要安装command line，如果电脑上已经安装完xcode，一般情况下命令行工具和gcc、make都会安装完成）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果上述工具没有安装完成，请参考以下两个链接：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jekyll.com.cn/docs/installation/#requirements&quot;&gt;Jekyll 先决条件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jekyll.com.cn/docs/installation/macos/&quot;&gt;Mac - 先决条件安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安装jekyll&quot;&gt;安装jekyll&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;安装一个完整的Ruby 开发环境。&lt;/li&gt;
  &lt;li&gt;安装 Jekyll 和 bundler gems。
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在 ./myblog 目录下创建一个全新的 Jekyll 网站。
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new myblog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;进入新创建的目录。
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd myblog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;构建网站并启动一个本地服务器。
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在浏览器中打开 http://localhost:4000 网址&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果是在本地中已经clone的文件夹，只需要进入到博客所在目录，通过jekyll 启动本地服务器即可
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;关闭链接&quot;&gt;关闭链接&lt;/h3&gt;
&lt;p&gt;ctrl-c 即可&lt;/p&gt;</content><author><name>YL</name></author><category term="jekyll" /><summary type="html">jekll 本地调试博客页面 解决每一篇博客都要同步到github上，然后才可以渲染查看页面的不便，需要在本地更新完博客之后，就可以预览和调试</summary></entry><entry><title type="html">Hello 2020</title><link href="http://localhost:4000/2020/03/23/%E4%BB%8E%E9%9B%B6%E5%87%BA%E5%8F%91/" rel="alternate" type="text/html" title="Hello 2020" /><published>2020-03-23T00:00:00+08:00</published><updated>2020-03-23T00:00:00+08:00</updated><id>http://localhost:4000/2020/03/23/%E4%BB%8E%E9%9B%B6%E5%87%BA%E5%8F%91</id><content type="html" xml:base="http://localhost:4000/2020/03/23/%E4%BB%8E%E9%9B%B6%E5%87%BA%E5%8F%91/">&lt;h2 id=&quot;从新开始&quot;&gt;从新开始&lt;/h2&gt;
&lt;p&gt;生活忽然很浮躁，很多事情没有来的及去做，或者来的及沉淀，时间就一点一点过去了。
总是要认真面对生活的，要不然每天活在惶恐和不安里，让我觉得生活了无生机，没有什么意思，也不能更好的感受和体验生活。对自己和自己所关心的人来说，没有比这更差的状态了。&lt;/p&gt;

&lt;h2 id=&quot;有所放弃&quot;&gt;有所放弃&lt;/h2&gt;
&lt;p&gt;需求太多就会导致欲望太多，自己不能达成欲望时，痛苦便随之而来，越发恐怖，愈发痛苦，生活也随之乏味。
我们要学会的是，学会控制我们自己的欲望，在一个比较简单的逻辑里，或者自己认定的逻辑里，不断去打磨逻辑，打磨兴趣，打磨生活，打磨自己。
不求水磨玉出，至少不辜负生活，不辜负时光，认真的活在当下。
时间总是有限制的，无论工作还是生活，亦或者其他，总要有重要和不重要的划分，总要有优先和滞后的区别。
希望我可以根据自己的需求，去找到那些是我生命中重要的，那些是生活中不重要的，围绕着自己想要的，去认真打磨。对于自己不想要的，就不要再不时想要触碰。
认真的活着，就意味着有深度的去做事情，有深度的去感受。
从小老妈总说，水过地皮湿，不能太浮躁。&lt;/p&gt;

&lt;h2 id=&quot;有所坚持&quot;&gt;有所坚持&lt;/h2&gt;
&lt;p&gt;世界那么大，我们要有所舍弃，也要有所坚持。在复杂问题和复杂思考面前，请不要一下子苛刻，求大求全，以小入，以大出。&lt;/p&gt;

&lt;p&gt;撼大摧坚，徐徐图之。&lt;/p&gt;

&lt;p&gt;Changelog：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;2020-03-23 初稿&lt;/li&gt;
&lt;/ol&gt;</content><author><name>YL</name></author><category term="生活" /><summary type="html">从新开始 生活忽然很浮躁，很多事情没有来的及去做，或者来的及沉淀，时间就一点一点过去了。 总是要认真面对生活的，要不然每天活在惶恐和不安里，让我觉得生活了无生机，没有什么意思，也不能更好的感受和体验生活。对自己和自己所关心的人来说，没有比这更差的状态了。</summary></entry><entry><title type="html">柔术最大的谎言「译」</title><link href="http://localhost:4000/2018/01/04/%E6%9F%94%E6%9C%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E8%B0%8E%E8%A8%80-%E8%AF%91/" rel="alternate" type="text/html" title="柔术最大的谎言「译」" /><published>2018-01-04T00:00:00+08:00</published><updated>2018-01-04T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/04/%E6%9F%94%E6%9C%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E8%B0%8E%E8%A8%80%E3%80%8C%E8%AF%91%E3%80%8D</id><content type="html" xml:base="http://localhost:4000/2018/01/04/%E6%9F%94%E6%9C%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E8%B0%8E%E8%A8%80-%E8%AF%91/">&lt;blockquote&gt;
  &lt;p&gt;译自 &lt;a href=&quot;http://www.jiujitsubrotherhood.com/the-biggest-lie-in-jiu-jitsu/&quot;&gt;《THE BIGGEST LIE IN JIU JITSU》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://mjrnxewya3t1in23ybpwjw59.wpengine.netdna-cdn.com/wp-content/uploads/buchecha-marcus-almeida-roger-gracie.jpg&quot; alt=&quot;Marcus'Buchecha'Almeida - 现任IBJJF绝对冠军。这家伙很坚强，相信我！图片由BJJ Pix的William Burkhardt提供  。&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近我看到了一个让我捧腹的柔术笑话。&lt;/p&gt;

&lt;p&gt;“柔术的技术是无敌的！”&lt;/p&gt;

&lt;p&gt;你可能不想听听下面的内容，但是作为一名柔术教练，我的工作是与你分享我认为的真理，而不是虚假的谎言。所以在这里与你们分享我的见解：&lt;/p&gt;

&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;技术不是无敌的&lt;/li&gt;
  &lt;li&gt;我的见解&lt;/li&gt;
  &lt;li&gt;一个假设&lt;/li&gt;
  &lt;li&gt;真实的例子&lt;/li&gt;
  &lt;li&gt;这个神话是从哪里来的？&lt;/li&gt;
  &lt;li&gt;好消息&lt;/li&gt;
  &lt;li&gt;如何变得更强&lt;/li&gt;
  &lt;li&gt;你该怎么做&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;技术不是无敌的&quot;&gt;技术不是无敌的&lt;/h2&gt;

&lt;p&gt;基础运动能力，特别是力量，对柔术的表现起着巨大的作用，而且往往可以克服技巧。尽管你被告知了卓越的技术并不总是能克服体型和力量优势。但在我看来，力量和技术一样重要。&lt;/p&gt;

&lt;h2 id=&quot;我的见解&quot;&gt;我的见解&lt;/h2&gt;

&lt;p&gt;我练习巴西柔术将近二十年，已经是一个黑带了。我认为自己是一个技术顶尖的柔术运动员，我致力于使自己的技术动作更加高效和精准。&lt;/p&gt;

&lt;p&gt;但是这里有个小秘密：有时候，我会利用力量强行完成一个柔术动作。我并不常这样做，但我明白力量对于柔术的重要性，并且它可以更好的帮助我完成动作，我已经认识到这样做是正确的。&lt;/p&gt;

&lt;p&gt;我的脑袋中仍然有一种“无力游戏”的想法，那就是我技术非常优秀，以至于我不需要出力就可以降服对手。但我知道这只是我的一个天真的想法。&lt;/p&gt;

&lt;p&gt;是的，世界顶尖的柔术运动员毫无疑问都拥有顶尖的柔术技术。但是，他们无一例外都是非常强壮的人。由于先天的遗传和后天科学的训练，这些家伙拥有不可思议的力量和体格。&lt;/p&gt;

&lt;p&gt;我的经验得出的这个等式适用与大多数情况：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;运动员A（中等技术 + 上等身体素质） &amp;gt;  运动员B（上等技术 + 下等身体素质）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一个假设&quot;&gt;一个假设&lt;/h3&gt;

&lt;p&gt;我知道你还不相信我，所以我会用一个例子来说明我的观点。让我们来看看使用两个战士 Steve 和 JoJo 的假想情景。&lt;/p&gt;

&lt;h4 id=&quot;steve&quot;&gt;Steve:&lt;/h4&gt;

&lt;p&gt;Steve 5岁开始学习柔术，由马塞洛·加西亚，拉法·门德斯和瑞克森·格雷西执教。它学会了他们所有的技巧，并且吸收了他们所有关于压力，时间和人体力学的智慧。他在接下来的13年里每周训练6天。&lt;/p&gt;

&lt;p&gt;18岁，体重200磅的 Steve 击败了所有对手取得了 &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Brazilian_Jiu-Jitsu_Federation&quot;&gt;IBJJF（国际巴西柔术联合会&lt;/a&gt;）世界锦标赛的棕色带中量级冠军，并且立即被授予黑带。第二年，在对战拥有绝对黑带实力的 Buchecha（开头照片中的人）的决赛中，用了一个飞身十字固在13秒内降服了他。&lt;/p&gt;

&lt;h4 id=&quot;jojo&quot;&gt;JoJo：&lt;/h4&gt;

&lt;p&gt;JoJo 是一个10岁的银背大猩猩。他体重400磅。他从未接受过柔术或其他武术的训练。&lt;/p&gt;

&lt;h4 id=&quot;一决胜负&quot;&gt;一决胜负：&lt;/h4&gt;

&lt;p&gt;假设 JoJo 与 Steve 展开一场柔术规则的比赛。&lt;/p&gt;

&lt;p&gt;你认为谁会赢得这场比赛？如果你认为 Steve 会用他的“无敌技巧”击败 JoJo，那么你就是妄想。（此外，你可以用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dim_Mak_Records&quot;&gt;点穴&lt;/a&gt; 试试~）&lt;/p&gt;

&lt;p&gt;JoJo 的&lt;strong&gt;体格&lt;/strong&gt;与&lt;strong&gt;力量&lt;/strong&gt;优势根本无法用技术来克服。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mjrnxewya3t1in23ybpwjw59.wpengine.netdna-cdn.com/wp-content/uploads/gorilla.jpg&quot; alt=&quot;你可以知道世界上所有的柔术运动，但是你不会打败JoJo。&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;真实的例子&quot;&gt;真实的例子&lt;/h3&gt;

&lt;p&gt;好吧，上面的例子非常不切实际，根本不会发生。但是，我可以举一些我身边的例子：&lt;/p&gt;

&lt;h4 id=&quot;例子1&quot;&gt;例子1:&lt;/h4&gt;

&lt;p&gt;在2013年，我亲眼目睹了世界冠军中，一位黑带女性与体重相同的紫色带男性的比赛，他们在一个开放的垫子上打成一片。这个女人一点机会都没有。她在6分钟内拍垫近十次。&lt;/p&gt;

&lt;p&gt;那么现在是因为“女人不擅长柔术”还是因为“男人比女人好”呢？当然不是。这只是一个简单的力量问题。这位男性拥有更高的睾酮水平，因此拥有更强大的结缔组织和更多的肌肉。&lt;/p&gt;

&lt;h4 id=&quot;例子2&quot;&gt;例子2:&lt;/h4&gt;

&lt;p&gt;我有一个朋友身高 1.95m，重达 300磅（136kg），是一个前NCAA中后卫球员。同时他也是柔术棕色腰带。他可以（而且经常）很容易地只用一只手臂将我从地面上抬起。当我们滚动时他绝对砸我，这时候基本上我是无能为力的。&lt;/p&gt;

&lt;p&gt;这是否因为他的技术比我好？当然不是。我的训练的时间比他更长，训练频率和强度要高得多。这是因为他比我更高，更大，更强壮。&lt;/p&gt;

&lt;h4 id=&quot;例子3&quot;&gt;例子3:&lt;/h4&gt;

&lt;p&gt;我的正常体重大约是203磅（92kg）。有时，由于各种原因，包括力量训练计划，肌酸周期或假日过度放纵，可能会高达218甚至220磅。&lt;/p&gt;

&lt;p&gt;因为我一直在垫子上呆着，所以我可以敏锐的察觉到体重对于柔术的影响。我可以直接告诉你：你越重，对抗越轻松。我可以更轻松的控制体重较轻的对手，并且能对抗更长的时间。&lt;/p&gt;

&lt;h3 id=&quot;这个神话是从哪里来的&quot;&gt;这个神话是从哪里来的？&lt;/h3&gt;

&lt;h4 id=&quot;传统武术的胡扯&quot;&gt;传统武术的胡扯&lt;/h4&gt;

&lt;p&gt;这个误解也是传统武术的骗人的精髓所在。告诉一个弱小的人学习了某种武术，他就轻松可以击败比他高大，更强壮的坏人。&lt;/p&gt;

&lt;p&gt;在20世纪，一个巨大的产业就建立在这个基础之上，各种乱七八糟的武术系统被包装并推给了好骗的西方人。尽管MMA中的柔术技术帮助清除了许多武术的骗局，但现在仍然受到影响。&lt;/p&gt;

&lt;h4 id=&quot;柔术课的结构&quot;&gt;柔术课的结构&lt;/h4&gt;

&lt;p&gt;还有一部分原因是由于柔术学院商业模式的本质。虽然柔术比赛竞争激烈，但是现在的柔术学院通常还只是围绕着&lt;code class=&quot;highlighter-rouge&quot;&gt;技术动作&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;实战对抗&lt;/code&gt;这两个方面进行教学和训练。因此，早期的先驱者重视身体训练，这是有道理的。&lt;/p&gt;

&lt;p&gt;乔治·圣皮埃尔的教练Firhas Zahabi曾经对我说过。“随着柔术学院商业化的推广，我们看到了很多必要的体能训练消失了。”他说的对，在绝大多数的柔术学院中，体能训练并不被重视。当然，你也可以做一些跳跃俯卧撑和俯卧撑作为热身的一部分，但这还远远不够。看看拳击手和摔跤手。体能训练往往是他们训练的最重要的组成部分，而对抗往往是花时间最小的一个。&lt;/p&gt;

&lt;h4 id=&quot;罗伊斯格雷斯-与-ufc&quot;&gt;罗伊斯·格雷斯 与 UFC&lt;/h4&gt;

&lt;p&gt;罗伊斯·格雷西（Royce Gracie）在 UFC 早期的比赛中的惊人表现导致了一些人相信技术确实是无敌的。在我看来，罗伊斯赢了，因为他打的比赛看起来像这样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;斗士A（中等属性+强大的技术）&amp;gt; 斗士B（伟大的属性+没有技术）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于第二代 MMA 斗士的的属性已经改变，因为家伙们已经开始学习柔术了。比赛开始更像这样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;斗士A（中等属性+强大技术）≥ 斗士B（强大属性+一点点技巧）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在如今的 MMA 比赛中，我们经常看到的情况是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;斗士A（卓越的属性+伟大的技术）&amp;gt; 斗士B（伟大的属性+伟大的技术）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;杠杠原理的迷惑&quot;&gt;杠杠原理的迷惑&lt;/h4&gt;

&lt;p&gt;杠杠原理能成倍加强力量，但不是力量的来源。当然，杠杠原理能帮你能更有效的利用力量，但没有力量来源，这个杠杠力也不复存在。这就是‘柔术’中‘杠杠原理’这个概念的迷惑性。&lt;/p&gt;

&lt;p&gt;尽管可能会有人告诉你，没有人能为柔术添加杠杠作用。但是一些聪明的运动员及教练确实能够准确的找到杠杠的支点，并且使用的力量来完成动作，效果惊人。&lt;/p&gt;

&lt;h3 id=&quot;好消息&quot;&gt;好消息&lt;/h3&gt;

&lt;p&gt;好消息是就算你只进行柔术对抗训练也能自然而然的提升你的体能，尽管这个提升有局限性并且基因决定了你的体能极限（抱歉，就是这样），而通过科学而且集中体能训练可以大幅度提升你的体能。&lt;/p&gt;

&lt;p&gt;同时，体型小的训练者并不是总是处于劣势。相对力量会随着体型的增加而减小。所以假设其他条件相同的情况下，一个体重比你大20%的对手，力量并不会比你大20%，通常这个值会是12%~15%。这就意味着那些拥有惊人身体的小个子训练者通常会扳平体型的劣势，有时候甚至还会反超。&lt;/p&gt;

&lt;p&gt;最后一个就是力量的增长也会随着年龄的增长而称下降的趋势，并在年老的时候就维持不变了。“人的力量就是这么真实”。&lt;/p&gt;

&lt;h3 id=&quot;如何变得更强&quot;&gt;如何变得更强&lt;/h3&gt;

&lt;h4 id=&quot;检查你的激素水平&quot;&gt;检查你的激素水平&lt;/h4&gt;

&lt;p&gt;如果你是一个男性柔术运动员，我建议你去内分泌专家那检查你的激素水平。如果你的睾丸酮激素水平过低，不管你如何训练，你的身体素质都不会有较大的提升。一个好医生会建议你使用多种补剂和药品来解决这个问题。&lt;/p&gt;

&lt;h4 id=&quot;体操&quot;&gt;体操&lt;/h4&gt;

&lt;p&gt;总体来说，拥有了功能性力量与身体控制能力，你将很难被击败。如果让我在力量训练之外再挑选一个最为柔术的赋值训练，那就是体操了。&lt;/p&gt;

&lt;h4 id=&quot;攀岩&quot;&gt;攀岩&lt;/h4&gt;

&lt;p&gt;另一项能直接对柔术的运动表现及其力量提升极大的运动就是攀岩了，尤其是握力。&lt;/p&gt;

&lt;h4 id=&quot;举重&quot;&gt;举重&lt;/h4&gt;

&lt;p&gt;举重对运动表现的提升不是通过几组二头弯举或者卧推就可以的，那是健身。你需要在专业教练的指导下练习奥运举和力量举（例如挺举，深蹲）。&lt;/p&gt;

&lt;h3 id=&quot;你该怎么做&quot;&gt;你该怎么做&lt;/h3&gt;

&lt;p&gt;提高柔术水平不仅仅是提升柔术技术。我喜欢柔术的技术，它是那样的直接有效，令人着迷。如果你想在道垫上降服对手，高质量的动作是必不可少的。但这还不够。你可以在&lt;a href=&quot;http://www.jiujitsubrotherhood.com/brazilian-jiu-jitsu-tips-a-c-t-model/&quot;&gt;这篇文章&lt;/a&gt;中找到答案。&lt;/p&gt;

&lt;p&gt;真正的武术家是一个在各个方面力精益求精的人。这包括变得更加强壮。如果你想成为顶级的柔术家，将你的体能提升到极限是你的必修课。&lt;/p&gt;</content><author><name>BY</name></author><category term="BJJ" /><summary type="html">译自 《THE BIGGEST LIE IN JIU JITSU》</summary></entry><entry><title type="html">快速配置zsh</title><link href="http://localhost:4000/2017/06/19/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEzsh/" rel="alternate" type="text/html" title="快速配置zsh" /><published>2017-06-19T00:00:00+08:00</published><updated>2017-06-19T00:00:00+08:00</updated><id>http://localhost:4000/2017/06/19/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEzsh</id><content type="html" xml:base="http://localhost:4000/2017/06/19/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEzsh/">&lt;blockquote&gt;
  &lt;p&gt;比较水的 Personal Notes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;查看你的系统有几种shell&quot;&gt;查看你的系统有几种shell&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/shells
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-oh-my-zsh&quot;&gt;安装 oh my zsh&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新打开终端，输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即可切换终端，并且发现 oh my zsh 已经帮我们配置好 zsh 了&lt;/p&gt;

&lt;h2 id=&quot;修改主题&quot;&gt;修改主题&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open ~/.zshrc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;ZSH_THEME=”robbyrussell”&lt;/code&gt;，主题在 ~/.oh-my-zsh/themes 目录下。
修改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZSH_THEME=&quot;kolo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&quot;&gt;参照这里&lt;/a&gt;进行选择.&lt;/p&gt;

&lt;h2 id=&quot;设置为默认shell&quot;&gt;设置为默认shell&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;添加自定义命令&quot;&gt;添加自定义命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open ~/.zshrc 添加显示隐藏文件的快捷命令

alias fd='defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder'
alias fh='defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>BY</name></author><category term="终端" /><category term="zsh" /><category term="Notes" /><summary type="html">比较水的 Personal Notes</summary></entry><entry><title type="html">Mac终端(zsh)下用代码编辑器打开文件或目录</title><link href="http://localhost:4000/2017/03/17/Mac%E7%BB%88%E7%AB%AF(zsh)%E4%B8%8B%E7%94%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/" rel="alternate" type="text/html" title="Mac终端(zsh)下用代码编辑器打开文件或目录" /><published>2017-03-17T00:00:00+08:00</published><updated>2017-03-17T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/17/Mac%E7%BB%88%E7%AB%AF(zsh)%E4%B8%8B%E7%94%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/2017/03/17/Mac%E7%BB%88%E7%AB%AF(zsh)%E4%B8%8B%E7%94%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最近在喵神 onevcat 的直播中发现喵神直接在终端就能用 vsCode 打开当前代码目录，非常方便。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;终端中 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;code .&lt;/code&gt;，在 &lt;strong&gt;vcCode&lt;/strong&gt; 打开当前文件目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fdpxob9m7sj31000rkam7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;h2 id=&quot;配置终端环境&quot;&gt;配置终端环境&lt;/h2&gt;

&lt;p&gt;终端环境为：&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; + &lt;a href=&quot;https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;zsh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;zsh 使用 &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;oh_my_zsh&lt;/a&gt; 配置&lt;/p&gt;

&lt;h2 id=&quot;安装zsh&quot;&gt;安装zsh&lt;/h2&gt;

&lt;h4 id=&quot;查看你的系统有几种shell&quot;&gt;查看你的系统有几种shell&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/shells
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;安装-oh-my-zsh&quot;&gt;安装 oh my zsh&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新打开终端，输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即可切换终端，并且发现 oh my zsh 已经帮我们配置好 zsh 了&lt;/p&gt;

&lt;h4 id=&quot;修改主题&quot;&gt;修改主题&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open ~/.zshrc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;ZSH_THEME=”robbyrussell”&lt;/code&gt;，主题在 ~/.oh-my-zsh/themes 目录下。
修改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZSH_THEME=&quot;kolo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&quot;&gt;参照这里&lt;/a&gt;进行选择.&lt;/p&gt;

&lt;h4 id=&quot;设置为默认shell&quot;&gt;设置为默认shell&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;修改-zsh-配置文件&quot;&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; 配置文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ open ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在文件中加上这几行代码&lt;/p&gt;

&lt;p&gt;对应 atom、SublimeText、与 vcCode。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias atom='/Applications/Atom.app/Contents/MacOS/Atom'
alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;
&lt;p&gt;使用 vcCode 打开&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文首次发布于 &lt;a href=&quot;http://qiubaiying.github.io&quot;&gt;BY Blog&lt;/a&gt;, 作者 &lt;a href=&quot;http://github.com/qiubaiying&quot;&gt;@柏荧(BY)&lt;/a&gt; ,转载请保留原文链接.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>BY</name></author><category term="Mac" /><category term="效率" /><category term="终端" /><category term="zsh" /><summary type="html">前言</summary></entry><entry><title type="html">使用 .gitignore 忽略 Git 仓库中的文件</title><link href="http://localhost:4000/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/" rel="alternate" type="text/html" title="使用 .gitignore 忽略 Git 仓库中的文件" /><published>2017-02-22T00:00:00+08:00</published><updated>2017-02-22T00:00:00+08:00</updated><id>http://localhost:4000/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6</id><content type="html" xml:base="http://localhost:4000/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/">&lt;blockquote&gt;
  &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件忽略指定文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h2&gt;

&lt;p&gt;在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt;文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;就能够在Git提交时自动忽略掉这些文件。&lt;/p&gt;

&lt;h2 id=&quot;忽略的格式&quot;&gt;忽略的格式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; :此为注释 – 将被 Git 忽略&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.a&lt;/code&gt; :忽略所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; 结尾的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!lib.a&lt;/code&gt; : 不忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.a&lt;/code&gt; 文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/TODO&lt;/code&gt; :仅仅忽略项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; 文件,不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;subdir/TODO&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; : 忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; 目录下的所有文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doc/*.txt&lt;/code&gt; : 会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/notes.txt&lt;/code&gt; 但不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/server/arch.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;创建方法&quot;&gt;创建方法&lt;/h2&gt;

&lt;h4 id=&quot;从-github-上获取&quot;&gt;从 &lt;a href=&quot;https://github.com/github/gitignore.git&quot;&gt;github&lt;/a&gt; 上获取&lt;/h4&gt;

&lt;p&gt;github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/github/gitignore.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与 Xcode 相关的三个文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode.gitignore&lt;/li&gt;
  &lt;li&gt;Objective-C.gitignore&lt;/li&gt;
  &lt;li&gt;Swift.gitignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt;忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; 配置信息，如操作记录，默认打开窗口等&lt;/p&gt;

&lt;p&gt;其他两个在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt; 基础上针对不同的语言进行忽略&lt;/p&gt;

&lt;p&gt;将这些文件重写命名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gittignore&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mv Swift.gitignore .gittignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;通过-gitignoreio-创建推荐&quot;&gt;通过 &lt;a href=&quot;https://www.gitignore.io/&quot;&gt;gitignore.io&lt;/a&gt; 创建（推荐）&lt;/h4&gt;

&lt;h6 id=&quot;先自定义终端命令&quot;&gt;先自定义终端命令：&lt;/h6&gt;

&lt;p&gt;macOS下默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;\#!/bin/bash&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.bash_profile &amp;amp;&amp;amp; source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/zsh&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;使用&quot;&gt;使用&lt;/h6&gt;

&lt;p&gt;在当前终端目录下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gi swift &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就会针对 Swifit 类型的工程创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件。&lt;/p&gt;</content><author><name>BY</name></author><category term="Mac" /><category term="终端" /><category term="Git" /><category term="Github" /><summary type="html">使用 .gitignore 文件忽略指定文件</summary></entry><entry><title type="html">Git 代码回滚</title><link href="http://localhost:4000/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/" rel="alternate" type="text/html" title="Git 代码回滚" /><published>2017-02-16T00:00:00+08:00</published><updated>2017-02-16T00:00:00+08:00</updated><id>http://localhost:4000/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A</id><content type="html" xml:base="http://localhost:4000/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/">&lt;blockquote&gt;
  &lt;p&gt;并不适合阅读的个人文档。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;git-revert-和-git-reset-的区别&quot;&gt;&lt;strong&gt;git revert&lt;/strong&gt; 和 &lt;strong&gt;git reset&lt;/strong&gt; 的区别&lt;/h1&gt;
&lt;p&gt;先看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sourceTree&lt;/strong&gt; 中 &lt;strong&gt;revert&lt;/strong&gt; 译为&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;提交回滚&lt;/code&gt;&lt;/strong&gt;，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reset&lt;/strong&gt; 为 &lt;strong&gt;重置到这次提交&lt;/strong&gt;，将内容重置到指定的版本。&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 命令后面是需要加2种参数的：&lt;code class=&quot;highlighter-rouge&quot;&gt;–-hard&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;–-soft&lt;/code&gt;。这条命令默认情况下是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-–soft&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令可以在缓冲区中看到这些修改。而如果加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-–hard&lt;/code&gt;参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin HEAD --force&lt;/code&gt; 强制将分区内容推送到远程服务器。&lt;/p&gt;

&lt;h4 id=&quot;代码回退&quot;&gt;代码回退&lt;/h4&gt;

&lt;p&gt;默认参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;-soft&lt;/code&gt;,所有commit的修改都会退回到git缓冲区
参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--hard&lt;/code&gt;，所有commit的修改直接丢弃&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD^ 		回退到上个版本
$ git reset --hard commit_id	退到/进到 指定commit_id 推送到远程	

$ git push origin HEAD --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;可以吃的后悔药-版本穿梭&quot;&gt;可以吃的后悔药-&amp;gt;版本穿梭&lt;/h4&gt;

&lt;p&gt;当你回滚之后，又后悔了，想恢复到新的版本怎么办？&lt;/p&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;打印你记录你的每一次操作记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog

输出：
c7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687
470e9c2 HEAD@{1}: reset: moving to 470e9c2
b45959e HEAD@{2}: revert: Revert &quot;add img&quot;
470e9c2 HEAD@{3}: reset: moving to 470e9c2
2c26183 HEAD@{4}: reset: moving to 2c26183
0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到你操作的id如：&lt;code class=&quot;highlighter-rouge&quot;&gt;b45959e&lt;/code&gt;，就可以回退到这个版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard b45959e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>BY</name></author><category term="Mac" /><category term="终端" /><category term="Git" /><summary type="html">并不适合阅读的个人文档。</summary></entry><entry><title type="html">Git指令整理</title><link href="http://localhost:4000/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/" rel="alternate" type="text/html" title="Git指令整理" /><published>2017-02-15T00:00:00+08:00</published><updated>2017-02-15T00:00:00+08:00</updated><id>http://localhost:4000/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86</id><content type="html" xml:base="http://localhost:4000/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/">&lt;blockquote&gt;
  &lt;p&gt;随便整理的一些自用的Git指令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;github创建仓库提示代码&quot;&gt;GitHub创建仓库提示代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;# 项目名&quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin git@github.com:qiubaiying/项目名.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若仓库存在直接push&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin git@github.com:qiubaiying/test.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;常用操作&quot;&gt;常用操作&lt;/h1&gt;

&lt;h4 id=&quot;创建仓库初始化&quot;&gt;创建仓库（初始化）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在当前指定目录下创建
git init

新建一个仓库目录
git init [project-name]

克隆一个远程项目
git clone [url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加文件到缓存区&quot;&gt;添加文件到缓存区&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加所有变化的文件
 	git add .

添加名称指定文件
git add text.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置提交代码时的用户信息
git config [--global] user.name &quot;[name]&quot;
git config [--global] user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;提交&quot;&gt;提交&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;提交暂存区到仓库区
git commit -m &quot;msg&quot;

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程同步&quot;&gt;远程同步&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分支&quot;&gt;分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;标签tags&quot;&gt;标签Tags&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加标签 在当前commit
git tag -a v1.0 -m 'xxx' 

添加标签 在指定commit
git tag v1.0 [commit]

查看
git tag

删除
git tag -d V1.0

删除远程tag
git push origin :refs/tags/[tagName]

推送
git push origin --tags

拉取
git fetch origin tag V1.0

新建一个分支，指向某个tag
git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查看信息&quot;&gt;查看信息&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;撤销&quot;&gt;撤销&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 生成一个可供发布的压缩包
$ git archives
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>BY</name></author><category term="Mac" /><category term="终端" /><category term="Git" /><summary type="html">随便整理的一些自用的Git指令</summary></entry><entry><title type="html">Mac 文本转音频</title><link href="http://localhost:4000/2017/02/15/Mac-%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91/" rel="alternate" type="text/html" title="Mac 文本转音频" /><published>2017-02-15T00:00:00+08:00</published><updated>2017-02-15T00:00:00+08:00</updated><id>http://localhost:4000/2017/02/15/Mac-%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91</id><content type="html" xml:base="http://localhost:4000/2017/02/15/Mac-%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91/">&lt;h1 id=&quot;文本转语音&quot;&gt;文本转语音&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;分享一条在Mac上将一个文本转换为音频文件的终端命令，个人认为还是蛮实用的。&lt;/p&gt;

  &lt;p&gt;来自: &lt;a href=&quot;http://25.io/toau/&quot;&gt;http://25.io/toau/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tNbRwgy1fcqwv0i9ovj30du04p74y.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;指令&quot;&gt;指令:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat sample.txt | say -o sample.aiff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>BY</name></author><category term="Mac" /><category term="终端" /><summary type="html">文本转语音</summary></entry></feed>