<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[jekyll debug]]></title>
      <url>/2020/03/24/jekyll%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/</url>
      <content type="text"><![CDATA[jekll 本地调试博客页面  解决每一篇博客都要同步到github上，然后才可以渲染查看页面的不便，需要在本地更新完博客之后，就可以预览和调试安装jekyll的先决条件  Ruby 2.4.0 或更高版本，包含所有用于开发的头文件（可通过* 执行 ruby -v 指令检查 ruby 版本）  RubyGems （可通过执行 gem -v 指令检查版本）  GCC and Make （以防你的系统中没有安装这些工具，请通过执行 gcc -v,g++ -v 和 make -v 指令进行检查，gcc 需要安装command line，如果电脑上已经安装完xcode，一般情况下命令行工具和gcc、make都会安装完成）如果上述工具没有安装完成，请参考以下两个链接：  Jekyll 先决条件  Mac - 先决条件安装安装jekyll  安装一个完整的Ruby 开发环境。  安装 Jekyll 和 bundler gems。gem install jekyll bundler  在 ./myblog 目录下创建一个全新的 Jekyll 网站。jekyll new myblog  进入新创建的目录。cd myblog  构建网站并启动一个本地服务器。bundle exec jekyll serve  在浏览器中打开 http://localhost:4000 网址如果是在本地中已经clone的文件夹，只需要进入到博客所在目录，通过jekyll 启动本地服务器即可jekyll s关闭链接ctrl-c 即可]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> jekyll </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[iTerm2 + Oh My Zsh 打造舒适终端体验]]></title>
      <url>/2020/03/24/iterm2-with-oh-my-zsh%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C-%E8%BD%AC%E8%BD%BD/</url>
      <content type="text"><![CDATA[iTerm2 + Oh My Zsh 打造舒适终端体验写在前面最终效果图：本文严重抄袭自：https://www.jianshu.com/p/7de00c73a2bb因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：https://git-scm.com介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。下载iTerm2可以直接去官网下载：https://www.iterm2.com/安装完成后，在/bin目录下会多出一个zsh的文件。Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：chsh -s /bin/zsh如果想修改回默认dash，同样使用chsh命令即可：chsh -s /bin/bashOK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！安装Oh my zsh安装方法有两种，可以使用curl或wget，看自己环境或喜好：# curl 安装方式sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"# wget 安装方式sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"安装命令和安装完成后的截图：oh-my-zsh开源地址：https://github.com/robbyrussell/oh-my-zsh安装PowerLinePowerline是agnoster主题的依赖。具体可以在repo里查询到：https://github.com/agnoster/agnoster-zsh-themepowerline官网：http://powerline.readthedocs.io/en/latest/installation.html安装powerline的方式依然简单，也只需要一条命令：pip install powerline-status --user没有安装pip的同学可能会碰到zsh: command not found: pip。使用命令安装pip即可：sudo easy_install pip安装后再次执行安装powerline的命令即可。安装PowerFonts安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/在此文件夹下执行git clone命令：# git clonegit clone https://github.com/powerline/fonts.git --depth=1# cd to foldercd fonts# run install shell./install.sh执行结果如下：安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：安装配色方案配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。同样使用git clone的方式下载源码进行安装：cd ~/Desktop/OpenSourcegit clone https://github.com/altercation/solarizedcd solarized/iterm2-colors-solarized/open .在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可：安装主题下载agnoster主题，执行脚本安装：cd ~/Desktop/OpenSourcegit clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.gitcd oh-my-zsh-agnoster-fcamblor/./install执行上面的命令会将主题拷贝到oh my zsh的themes中：拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。vi ~/.zshrc修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。此时command+Q或source配置文件后，iTerm2变了模样：安装高亮插件这是oh my zsh的一个插件，安装方式与theme大同小异：cd ~/.oh-my-zsh/custom/plugins/git clone https://github.com/zsh-users/zsh-syntax-highlighting.gitvi ~/.zshrc这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh按一下esc调出vi命令，输入:wq保存并退出vi模式。执行命令使刚才的修改生效：source ~/.zshrc至此大功告成，请看最终效果图：背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：https://pan.baidu.com/s/1LKd4ghGyyNI6UwHhOHvfaA提取码: snrd更换背景图片方式：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image勾选图片即可。可选择、命令补全跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。cd ~/.oh-my-zsh/custom/plugins/git clone https://github.com/zsh-users/zsh-autosuggestionsvi ~/.zshrc找到plugins，加上这个插件即可：插件效果：有同学说补全命令的字体不太清晰，与背景颜色太过相近，其实可以自己调整一下字体颜色。Preferences -&gt; Profiles -&gt; Colors 中有Foreground是标准字体颜色，ANSI Colors中Bright的第一个是补全的字体颜色。]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> iTerm2 </tag>
        
          <tag> Oh my Zsh </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Hello 2020]]></title>
      <url>/2020/03/23/%E4%BB%8E%E9%9B%B6%E5%87%BA%E5%8F%91/</url>
      <content type="text"><![CDATA[从新开始生活忽然很浮躁，很多事情没有来的及去做，或者来的及沉淀，时间就一点一点过去了。总是要认真面对生活的，要不然每天活在惶恐和不安里，让我觉得生活了无生机，没有什么意思，也不能更好的感受和体验生活。对自己和自己所关心的人来说，没有比这更差的状态了。有所放弃需求太多就会导致欲望太多，自己不能达成欲望时，痛苦便随之而来，越发恐怖，愈发痛苦，生活也随之乏味。我们要学会的是，学会控制我们自己的欲望，在一个比较简单的逻辑里，或者自己认定的逻辑里，不断去打磨逻辑，打磨兴趣，打磨生活，打磨自己。不求水磨玉出，至少不辜负生活，不辜负时光，认真的活在当下。时间总是有限制的，无论工作还是生活，亦或者其他，总要有重要和不重要的划分，总要有优先和滞后的区别。希望我可以根据自己的需求，去找到那些是我生命中重要的，那些是生活中不重要的，围绕着自己想要的，去认真打磨。对于自己不想要的，就不要再不时想要触碰。认真的活着，就意味着有深度的去做事情，有深度的去感受。从小老妈总说，水过地皮湿，不能太浮躁。有所坚持世界那么大，我们要有所舍弃，也要有所坚持。在复杂问题和复杂思考面前，请不要一下子苛刻，求大求全，以小入，以大出。撼大摧坚，徐徐图之。Changelog：  2020-03-23 初稿]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> 生活 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[柔术最大的谎言「译」]]></title>
      <url>/2018/01/04/%E6%9F%94%E6%9C%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E8%B0%8E%E8%A8%80-%E8%AF%91/</url>
      <content type="text"><![CDATA[  译自 《THE BIGGEST LIE IN JIU JITSU》最近我看到了一个让我捧腹的柔术笑话。“柔术的技术是无敌的！”你可能不想听听下面的内容，但是作为一名柔术教练，我的工作是与你分享我认为的真理，而不是虚假的谎言。所以在这里与你们分享我的见解：目录  技术不是无敌的  我的见解  一个假设  真实的例子  这个神话是从哪里来的？  好消息  如何变得更强  你该怎么做技术不是无敌的基础运动能力，特别是力量，对柔术的表现起着巨大的作用，而且往往可以克服技巧。尽管你被告知了卓越的技术并不总是能克服体型和力量优势。但在我看来，力量和技术一样重要。我的见解我练习巴西柔术将近二十年，已经是一个黑带了。我认为自己是一个技术顶尖的柔术运动员，我致力于使自己的技术动作更加高效和精准。但是这里有个小秘密：有时候，我会利用力量强行完成一个柔术动作。我并不常这样做，但我明白力量对于柔术的重要性，并且它可以更好的帮助我完成动作，我已经认识到这样做是正确的。我的脑袋中仍然有一种“无力游戏”的想法，那就是我技术非常优秀，以至于我不需要出力就可以降服对手。但我知道这只是我的一个天真的想法。是的，世界顶尖的柔术运动员毫无疑问都拥有顶尖的柔术技术。但是，他们无一例外都是非常强壮的人。由于先天的遗传和后天科学的训练，这些家伙拥有不可思议的力量和体格。我的经验得出的这个等式适用与大多数情况：  运动员A（中等技术 + 上等身体素质） &gt;  运动员B（上等技术 + 下等身体素质）一个假设我知道你还不相信我，所以我会用一个例子来说明我的观点。让我们来看看使用两个战士 Steve 和 JoJo 的假想情景。Steve:Steve 5岁开始学习柔术，由马塞洛·加西亚，拉法·门德斯和瑞克森·格雷西执教。它学会了他们所有的技巧，并且吸收了他们所有关于压力，时间和人体力学的智慧。他在接下来的13年里每周训练6天。18岁，体重200磅的 Steve 击败了所有对手取得了 IBJJF（国际巴西柔术联合会）世界锦标赛的棕色带中量级冠军，并且立即被授予黑带。第二年，在对战拥有绝对黑带实力的 Buchecha（开头照片中的人）的决赛中，用了一个飞身十字固在13秒内降服了他。JoJo：JoJo 是一个10岁的银背大猩猩。他体重400磅。他从未接受过柔术或其他武术的训练。一决胜负：假设 JoJo 与 Steve 展开一场柔术规则的比赛。你认为谁会赢得这场比赛？如果你认为 Steve 会用他的“无敌技巧”击败 JoJo，那么你就是妄想。（此外，你可以用 点穴 试试~）JoJo 的体格与力量优势根本无法用技术来克服。真实的例子好吧，上面的例子非常不切实际，根本不会发生。但是，我可以举一些我身边的例子：例子1:在2013年，我亲眼目睹了世界冠军中，一位黑带女性与体重相同的紫色带男性的比赛，他们在一个开放的垫子上打成一片。这个女人一点机会都没有。她在6分钟内拍垫近十次。那么现在是因为“女人不擅长柔术”还是因为“男人比女人好”呢？当然不是。这只是一个简单的力量问题。这位男性拥有更高的睾酮水平，因此拥有更强大的结缔组织和更多的肌肉。例子2:我有一个朋友身高 1.95m，重达 300磅（136kg），是一个前NCAA中后卫球员。同时他也是柔术棕色腰带。他可以（而且经常）很容易地只用一只手臂将我从地面上抬起。当我们滚动时他绝对砸我，这时候基本上我是无能为力的。这是否因为他的技术比我好？当然不是。我的训练的时间比他更长，训练频率和强度要高得多。这是因为他比我更高，更大，更强壮。例子3:我的正常体重大约是203磅（92kg）。有时，由于各种原因，包括力量训练计划，肌酸周期或假日过度放纵，可能会高达218甚至220磅。因为我一直在垫子上呆着，所以我可以敏锐的察觉到体重对于柔术的影响。我可以直接告诉你：你越重，对抗越轻松。我可以更轻松的控制体重较轻的对手，并且能对抗更长的时间。这个神话是从哪里来的？传统武术的胡扯这个误解也是传统武术的骗人的精髓所在。告诉一个弱小的人学习了某种武术，他就轻松可以击败比他高大，更强壮的坏人。在20世纪，一个巨大的产业就建立在这个基础之上，各种乱七八糟的武术系统被包装并推给了好骗的西方人。尽管MMA中的柔术技术帮助清除了许多武术的骗局，但现在仍然受到影响。柔术课的结构还有一部分原因是由于柔术学院商业模式的本质。虽然柔术比赛竞争激烈，但是现在的柔术学院通常还只是围绕着技术动作和实战对抗这两个方面进行教学和训练。因此，早期的先驱者重视身体训练，这是有道理的。乔治·圣皮埃尔的教练Firhas Zahabi曾经对我说过。“随着柔术学院商业化的推广，我们看到了很多必要的体能训练消失了。”他说的对，在绝大多数的柔术学院中，体能训练并不被重视。当然，你也可以做一些跳跃俯卧撑和俯卧撑作为热身的一部分，但这还远远不够。看看拳击手和摔跤手。体能训练往往是他们训练的最重要的组成部分，而对抗往往是花时间最小的一个。罗伊斯·格雷斯 与 UFC罗伊斯·格雷西（Royce Gracie）在 UFC 早期的比赛中的惊人表现导致了一些人相信技术确实是无敌的。在我看来，罗伊斯赢了，因为他打的比赛看起来像这样：  斗士A（中等属性+强大的技术）&gt; 斗士B（伟大的属性+没有技术）由于第二代 MMA 斗士的的属性已经改变，因为家伙们已经开始学习柔术了。比赛开始更像这样：  斗士A（中等属性+强大技术）≥ 斗士B（强大属性+一点点技巧）在如今的 MMA 比赛中，我们经常看到的情况是这样的：  斗士A（卓越的属性+伟大的技术）&gt; 斗士B（伟大的属性+伟大的技术）杠杠原理的迷惑杠杠原理能成倍加强力量，但不是力量的来源。当然，杠杠原理能帮你能更有效的利用力量，但没有力量来源，这个杠杠力也不复存在。这就是‘柔术’中‘杠杠原理’这个概念的迷惑性。尽管可能会有人告诉你，没有人能为柔术添加杠杠作用。但是一些聪明的运动员及教练确实能够准确的找到杠杠的支点，并且使用的力量来完成动作，效果惊人。好消息好消息是就算你只进行柔术对抗训练也能自然而然的提升你的体能，尽管这个提升有局限性并且基因决定了你的体能极限（抱歉，就是这样），而通过科学而且集中体能训练可以大幅度提升你的体能。同时，体型小的训练者并不是总是处于劣势。相对力量会随着体型的增加而减小。所以假设其他条件相同的情况下，一个体重比你大20%的对手，力量并不会比你大20%，通常这个值会是12%~15%。这就意味着那些拥有惊人身体的小个子训练者通常会扳平体型的劣势，有时候甚至还会反超。最后一个就是力量的增长也会随着年龄的增长而称下降的趋势，并在年老的时候就维持不变了。“人的力量就是这么真实”。如何变得更强检查你的激素水平如果你是一个男性柔术运动员，我建议你去内分泌专家那检查你的激素水平。如果你的睾丸酮激素水平过低，不管你如何训练，你的身体素质都不会有较大的提升。一个好医生会建议你使用多种补剂和药品来解决这个问题。体操总体来说，拥有了功能性力量与身体控制能力，你将很难被击败。如果让我在力量训练之外再挑选一个最为柔术的赋值训练，那就是体操了。攀岩另一项能直接对柔术的运动表现及其力量提升极大的运动就是攀岩了，尤其是握力。举重举重对运动表现的提升不是通过几组二头弯举或者卧推就可以的，那是健身。你需要在专业教练的指导下练习奥运举和力量举（例如挺举，深蹲）。你该怎么做提高柔术水平不仅仅是提升柔术技术。我喜欢柔术的技术，它是那样的直接有效，令人着迷。如果你想在道垫上降服对手，高质量的动作是必不可少的。但这还不够。你可以在这篇文章中找到答案。真正的武术家是一个在各个方面力精益求精的人。这包括变得更加强壮。如果你想成为顶级的柔术家，将你的体能提升到极限是你的必修课。]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> BJJ </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[快速配置zsh]]></title>
      <url>/2017/06/19/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEzsh/</url>
      <content type="text"><![CDATA[  比较水的 Personal Notes查看你的系统有几种shellcat /etc/shells显示/bin/bash/bin/csh/bin/ksh/bin/sh/bin/tcsh/bin/zsh安装 oh my zshgit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc重新打开终端，输入zsh即可切换终端，并且发现 oh my zsh 已经帮我们配置好 zsh 了修改主题open ~/.zshrc 修改 ZSH_THEME=”robbyrussell”，主题在 ~/.oh-my-zsh/themes 目录下。修改为ZSH_THEME="kolo"可以参照这里进行选择.设置为默认shellchsh -s /bin/zsh添加自定义命令open ~/.zshrc 添加显示隐藏文件的快捷命令alias fd='defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder'alias fh='defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder']]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> 终端 </tag>
        
          <tag> zsh </tag>
        
          <tag> Notes </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Mac终端(zsh)下用代码编辑器打开文件或目录]]></title>
      <url>/2017/03/17/Mac%E7%BB%88%E7%AB%AF(zsh)%E4%B8%8B%E7%94%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</url>
      <content type="text"><![CDATA[前言最近在喵神 onevcat 的直播中发现喵神直接在终端就能用 vsCode 打开当前代码目录，非常方便。在zsh终端中 使用 code .，在 vcCode 打开当前文件目录正文配置终端环境终端环境为：iTerm2 + zshzsh 使用 oh_my_zsh 配置安装zsh查看你的系统有几种shellcat /etc/shells显示/bin/bash/bin/csh/bin/ksh/bin/sh/bin/tcsh/bin/zsh安装 oh my zshgit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc重新打开终端，输入zsh即可切换终端，并且发现 oh my zsh 已经帮我们配置好 zsh 了修改主题open ~/.zshrc 修改 ZSH_THEME=”robbyrussell”，主题在 ~/.oh-my-zsh/themes 目录下。修改为ZSH_THEME="kolo"可以参照这里进行选择.设置为默认shellchsh -s /bin/zsh修改 zsh 配置文件$ open ~/.zshrc在文件中加上这几行代码对应 atom、SublimeText、与 vcCode。alias atom='/Applications/Atom.app/Contents/MacOS/Atom'alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'测试使用 vcCode 打开$ code .  本文首次发布于 BY Blog, 作者 @柏荧(BY) ,转载请保留原文链接.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 效率 </tag>
        
          <tag> 终端 </tag>
        
          <tag> zsh </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[使用 .gitignore 忽略 Git 仓库中的文件]]></title>
      <url>/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      <content type="text"><![CDATA[  使用 .gitignore 文件忽略指定文件.gitignore在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的.DS_Store文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用.gitignore就能够在Git提交时自动忽略掉这些文件。忽略的格式  # :此为注释 – 将被 Git 忽略  *.a :忽略所有 .a 结尾的文件  !lib.a : 不忽略 lib.a 文件  /TODO :仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO  build/ : 忽略 build/ 目录下的所有文件  doc/*.txt : 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt创建方法从 github 上获取github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取https://github.com/github/gitignore.git与 Xcode 相关的三个文件  Xcode.gitignore  Objective-C.gitignore  Swift.gitignoreXcode.gitignore忽略 Xcode 配置信息，如操作记录，默认打开窗口等其他两个在 Xcode.gitignore 基础上针对不同的语言进行忽略将这些文件重写命名为 .gittignore$ mv Swift.gitignore .gittignore通过 gitignore.io 创建（推荐）先自定义终端命令：macOS下默认是\#!/bin/bash：$ echo "function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}" &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile如果是 #!/bin/zsh$ echo "function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc使用在当前终端目录下$ gi swift &gt; .gitignore就会针对 Swifit 类型的工程创建 .gitignore 文件。]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 终端 </tag>
        
          <tag> Git </tag>
        
          <tag> Github </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Git 代码回滚]]></title>
      <url>/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/</url>
      <content type="text"><![CDATA[  并不适合阅读的个人文档。git revert 和 git reset 的区别先看图：sourceTree 中 revert 译为提交回滚，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。reset 为 重置到这次提交，将内容重置到指定的版本。git reset 命令后面是需要加2种参数的：–-hard 和 –-soft。这条命令默认情况下是 -–soft。执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用git status 命令可以在缓冲区中看到这些修改。而如果加上-–hard参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 git push origin HEAD --force 强制将分区内容推送到远程服务器。代码回退默认参数 -soft,所有commit的修改都会退回到git缓冲区参数--hard，所有commit的修改直接丢弃$ git reset --hard HEAD^ 		回退到上个版本$ git reset --hard commit_id	退到/进到 指定commit_id 推送到远程	$ git push origin HEAD --force可以吃的后悔药-&gt;版本穿梭当你回滚之后，又后悔了，想恢复到新的版本怎么办？用git reflog打印你记录你的每一次操作记录$ git reflog输出：c7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687470e9c2 HEAD@{1}: reset: moving to 470e9c2b45959e HEAD@{2}: revert: Revert "add img"470e9c2 HEAD@{3}: reset: moving to 470e9c22c26183 HEAD@{4}: reset: moving to 2c261830f67bb7 HEAD@{5}: revert: Revert "add img"找到你操作的id如：b45959e，就可以回退到这个版本$ git reset --hard b45959e]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 终端 </tag>
        
          <tag> Git </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Mac 文本转音频]]></title>
      <url>/2017/02/15/Mac-%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91/</url>
      <content type="text"><![CDATA[文本转语音  分享一条在Mac上将一个文本转换为音频文件的终端命令，个人认为还是蛮实用的。  来自: http://25.io/toau/指令:cat sample.txt | say -o sample.aiff]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 终端 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Git指令整理]]></title>
      <url>/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      <content type="text"><![CDATA[  随便整理的一些自用的Git指令GitHub创建仓库提示代码echo "# 项目名" &gt;&gt; README.mdgit initgit add README.mdgit commit -m "first commit"git remote add origin git@github.com:qiubaiying/项目名.gitgit push -u origin master若仓库存在直接pushgit remote add origin git@github.com:qiubaiying/test.gitgit push -u origin master常用操作创建仓库（初始化）在当前指定目录下创建git init新建一个仓库目录git init [project-name]克隆一个远程项目git clone [url]添加文件到缓存区添加所有变化的文件 	git add .添加名称指定文件git add text.txt配置设置提交代码时的用户信息git config [--global] user.name "[name]"git config [--global] user.email "[email address]"提交提交暂存区到仓库区git commit -m "msg"# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...远程同步# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]标签Tags添加标签 在当前commitgit tag -a v1.0 -m 'xxx' 添加标签 在指定commitgit tag v1.0 [commit]查看git tag删除git tag -d V1.0删除远程taggit push origin :refs/tags/[tagName]推送git push origin --tags拉取git fetch origin tag V1.0新建一个分支，指向某个taggit checkout -b [branch] [tag]查看信息# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog撤销# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop其他# 生成一个可供发布的压缩包$ git archives]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 终端 </tag>
        
          <tag> Git </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[随便聊聊]]></title>
      <url>/2017/02/14/%E9%9A%8F%E4%BE%BF%E8%81%8A%E8%81%8A/</url>
      <content type="text"><![CDATA[随便谈谈今天是情人节，首先祝大家情人节快乐~在这特殊的节日里，我特意花了半天的时间，我将在简书中的文章都搬到 BY Blog 上，顺便又修改了下博客框架。关于分享最近有很多人来请教我关于建站的问题，我都花时间为其解答一一解答。感觉在解答别人的问题时，你自己也能学到很多新的知识，同时能沉浸其中。我想这就是分享的魔力吧。所以，把问题都砸过来吧~]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> 生活 </tag>
        
          <tag> 博客 </tag>
        
          <tag> 漫谈 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Mac 快速调出终端]]></title>
      <url>/2017/02/06/Mac%E5%BF%AB%E9%80%9F%E8%B0%83%E5%87%BA%E7%BB%88%E7%AB%AF/</url>
      <content type="text"><![CDATA[  在Mac下快速调出终端的方法是：为终端添加一个快捷键打开方式为终端添加一个快捷键打开方式打开Mac下自带的软件 Automator新建文稿创建一个服务修改框内的脚本on run {input, parameters}	tell application "Terminal"		reopen		activate	end tellend run运行：command + R，如果没有问题，则会打开终端保存：Command + S，将其命名为打开终端或你想要的名字设置快捷键在 系统偏好设置 -&gt; 键盘设置 -&gt; 快捷键 -&gt; 服务选择我们创建好的 ‘打开终端‘，设置你想要的快捷键，比我我设置了⌘+空格到此，设置完成。聪明的你也许会发现，这个技巧能为所有的程序设置快捷启动。将脚本中的 Terminal 替换成 其他程序就可以on run {input, parameters}    tell application "Terminal"        reopen        activate    end tellend run黑技能既然学了 Automator ，那就在附上一个黑技能吧。为你的代码排序。在 Xcode8以前，有个插件能为代码快速排序，不过时过境迁~ 对于没用的插件而且又有患有强迫症的的小伙伴，只能手动排序了（😂）.首先还是创建一个服务创建一个Shell脚本，勾选:用输出内容替换所选文本输入：sort|uniq保存： 存为Sort &amp; Uniq选中你的代代码 -&gt; 鼠标右键 -&gt; Servies -&gt; Sort&amp;Uniq排序后的代码：]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Mac </tag>
        
          <tag> 效率 </tag>
        
          <tag> 开发技巧 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[快速搭建个人博客]]></title>
      <url>/2017/02/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="text"><![CDATA[  正所谓前人栽树，后人乘凉。  感谢Huxpro提供的博客模板  我的的博客前言从 Jekyll 到 GitHub Pages 中间踩了许多坑，终于把我的个人博客BY Blog搭建出来了。。。本教程针对的是不懂技术又想搭建个人博客的小白，操作简单暴力且快速。当然懂技术那就更好了。看看看博客的主页样式：在手机上的布局：废话不多说了，开始进入正文。快速开始从注册一个Github账号开始我采用的搭建博客的方式是使用 GitHub Pages + jekyll 的方式。要使用 GitHub Pages，首先你要注册一个GitHub账号，GitHub 是全球最大的同性交友网站(吐槽下程序员~)，你值得拥有。拉取我的博客模板注册完成后搜索 qiubaiying.github.io 进入我的仓库点击右上角的 Fork 将我的仓库拉倒你的账号下稍等一下，点击刷新，你会看到Fork了成功的页面修改仓库名点击settings进入设置修改仓库名为 你的Github账号名.github.io，然后 Rename这时你在在浏览器中输入 你的Github账号名.github.io 例如:baiyingqiu.github.io你将会看到如下界面说明已经成功一半了😀。。。当然，还需要修改博客的配置才能变成你的博客。若是出现则需要 检查一下你的仓库名是否正确整个网站结构修改Blog前我们来看看Jekyll 网站的基础结构，当然我们的网站比这个复杂。├── _config.yml├── _drafts|   ├── begin-with-the-crazy-ideas.textile|   └── on-simplicity-in-technology.markdown├── _includes|   ├── footer.html|   └── header.html├── _layouts|   ├── default.html|   └── post.html├── _posts|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile|   └── 2009-04-26-barcamp-boston-4-roundup.textile├── _data|   └── members.yml├── _site├── img└── index.html很复杂看不懂是不是，不要紧，你只要记住其中几个OK了  _config.yml 全局配置文件  _posts	放置博客文章的文件夹  img	存放图片的文件夹其他的想继续深究可以看这里修改博客配置来到你的仓库，找到_config.yml文件,这是网站的全局配置文件。点击修改然后编辑_config.yml的内容接下来我们来详细说说以下配置文件的内容：基础设置# Site settingstitle: You Blog    				  	#你博客的标题SEOTitle: 你的博客 | You Blog    	 #显示在浏览器上搜索的时候显示的标题header-img: img/post-bg-rwd.jpg  	#显示在首页的背景图片email: You@gmail.com	description: "You Blog"  			 #网站介绍keyword: "BY, BY Blog, 柏荧的博客, qiubaiying, 邱柏荧, iOS, Apple, iPhone" #关键词url: "https://qiubaiying.github.io"          # 这个就是填写你的博客地址baseurl: ""      # 这个我们不用填写侧边栏# Sidebar settingssidebar: true                           # 是否开启侧边栏.sidebar-about-description: "说点装逼的话。。。"sidebar-avatar:/img/avatar-by.JPG      # 你的个人头像 这里你可以改成我在img文件夹中的两张备用照片 img/avatar-m 或 avatar-g社交账号展示你的其他社交平台在下面你的社交账号的用户名就可以了，若没有可不用填# SNS settingsRSS: falseweibo_username:     usernamezhihu_username:     usernamegithub_username:    usernamefacebook_username:  usernamejianshu_username:	jianshu_id新加入了简书，jianshu_id 在你打开你的简书主页后的地址如：http://www.jianshu.com/u/e71990ada2fd中，后面这一串数字：e71990ada2fd 评论系统博客中使用的是 Disqus 评论系统，在 官网 注册帐号后，按下面的步骤简单的配置即可：进入 设置页面 配置个人信息找到 Username这个 Username  就是我们 _config.yml 中 disqus_username# Disqus settings（https://disqus.com/）disqus_username: qiubaiying  很对人反映 Disqus 评论插件加载不出来，因为 Disqus 在国内加载缓慢，所以我新集成了 Gitalk 评论插件（感谢@FeDemo的推荐），喜欢折腾的朋友可以看这篇：《为博客添加 Gitalk 评论插件》。 我已经在_config.yml 配置就好了，只需要填写参数可以了。网站统计集成了 Baidu Analytics 和 Google Analytics，到各个网站注册拿到track_id替换下面的就可以了这是我的 Google Analytics不要使用我的track_id😂。。。若不想启用统计，直接删除或注释掉就可以了# Analytics settings# Baidu Analyticsba_track_id: 83e259f69b37d02a4633a2b7d960139c# Google Analyticsga_track_id: 'UA-90855596-1'            # Format: UA-xxxxxx-xxga_domain: auto好友friends: [    {        title: "简书·BY",        href: "http://www.jianshu.com/u/e71990ada2fd"    },{        title: "Apple",        href: "https://apple.com"    },{        title: "Apple Developer",        href: "https://developer.apple.com/"    }]保存讲网页拉倒底部，点击 Commit changes 提交保存再次进入你的主页，恭喜你，你的个人博客搭建完成了😀。写文章利用 Github网站 ，我们可以不用学习git，就可以轻松管理自己的博客对于轻车熟路的程序猿来说，使用git管理会更加方便。。。创建文章统一放在网站根目录下的 _posts 的文件夹中。创建一个文件在下面写文章，和标题，还能实时预览，最后提交保存就能看到自己的新文章了。格式每一篇文章文件命名采用的是2017-02-04-Hello-2017.md时间+标题的形式，空格用-替换连接。文件的格式是 .md 的 MarkDown 文件。我们的博客文章格式采用是 MarkDown+ YAML 的方式。YAML 就是我们配置 _config文件用的语言。MarkDown 是一种轻量级的「标记语言」，很简单。花半个小时看一下就能熟练使用了大概就是这么一个结构。---layout:     post   				    # 使用的布局（不需要改）title:      My First Post 				# 标题 subtitle:   Hello World, Hello Blog #副标题date:       2017-02-06 				# 时间author:     BY 						# 作者header-img: img/post-bg-2015.jpg 	#这篇文章标题背景图片catalog: true 						# 是否归档tags:								#标签    - 生活---## Hey&gt;这是我的第一篇博客。进入你的博客主页，新的文章将会出现在你的主页上.按格式创建文章后，提交保存。进入你的博客主页，新的文章将会出现在你的主页上.到这里，恭喜你！你已经成功搭建了自己的个人博客以及学会在博客上撰写文字的技能了（是不是有点小兴奋🙈）。首页标签在首页可以看到这些特色标签，当你的文章出现相同标签（默认相同的标签数量大于1），才会自动生成。所以当你只放一篇文章的时候是不会出现标签的。建站的初期，博客比较少，若你想直接在首页生成比较多的标签。你可以在 _congfig.yml中找到这段：# Featured Tagsfeatured-tags: true                     # 是否使用首页标签featured-condition-size: 1              # 相同标签数量大于这个数，才会出现在首页将其修改为featured-condition-size: 0, 这样只有一个标签时也会出现在首页了。相反，当你博客比较多，标签也很多时，这时你就需要改回 1 甚至是 2 了。自定义域名搭建好博客之后 你可能不想直接使用 baiyingqiu.github.io 这么长的博客域名吧, 想换成想 qiubaiying.top 这样简短的域名。那我们开始吧！购买域名首先，你必须购买一个自己的域名。我是在阿里云购买的域名用阿里云 app也可以注册域名，域名的价格根据后缀的不同和域名的长度而分，比如我这个 qiubaiying.top 的域名第一年才只要4元~域名尽量选择短一点比较好记住，注意，不能选择中文域名，比如 张三.top ,GitHub Pages 无法处理中文域名，会导致你的域名在你的主页上使用。注册的步骤就不在介绍了解析域名注册好域名后，需要将域名解析到你的博客上管理控制台 → 域名与网站（万网） → 域名选择你注册好的域名，点击解析添加解析分别添加两个A 记录类型,一个主机记录为 www,代表可以解析 www.qiubaiying.top的域名另一个为 @, 代表 qiubaiying.top记录值就是我们博客的IP地址，是 GitHub Pagas 在美国的服务器的地址 151.101.100.133可以通过 这个网站  或者直接在终端输入ping 你的地址，查看博客的IPping qiubaiying.github.io细心地你会发现所有人的博客都解析到 151.101.100.133 这个IP。然后 GitHub Pages 再通过 CNAME记录 跳转到你的主页上。修改CNAME最后一步，只需要修改 我们github仓库下的 CNAME 文件。选择 CNAME 文件使用的注册的域名进行替换,然后提交保存这时，输入你自己的域名，就可以解析到你的主页了。大功告成！进阶若你对博客模板进行修改，你就要看看 Jekyll 的开发文档,是中文文档哦，对英语一般的朋友简直是福利啊（比如说我😀）。还要学习 Git 和 GitHub 的工作机制了及使用。你可以先看看这个git教程，对git有个初步的了解后，那么相信你就能将自己图片传到GitHub仓库上，或者可以说掌握了 使用git管理自己的GitHub仓库 的技能呢。对于轻车熟路的程序猿来说，这篇教程就算就结束了，因为下面的内容对于你们来说 so eazy~但相信很多小白都一脸懵逼，那我们继续👇。利用GithHub Desktop管理GitHub仓库GithHub Desktop 是 GithHub 推出的一款管理GitHub仓库的桌面软件，换句话说就是将你在Github上的文件同步到本地电脑上，并将修改后的文件同步到Github远程仓库。下载点击图片进入下载页面，选择对应的平台进行下载下面以Mac平台为例：安装将下载好的文件解压，将这只小猫拖到应用程序文件夹中就可以在Launchpad找到这只小猫咪~登录点开应用,会弹出登录框，输入你的GitHub账号和密码进行登录登录后关闭窗口然后返回引导窗，一直按 Continue 继续Continue还是Continue~进入主界面，先 右键Remve 删除这个用户指导，贼烦~克隆仓库选择你的仓库克隆到本地管理仓库现在文件夹中打开打开后你会的发现文件结构和你在Github上的一模一样~你最先关心的可能是你的头像~在img文件夹中把替换我的头像就好了。不仅是图片，所有在Github上的的操作都可以进行。保存修改当你对仓库文件夹的文件下进行修改、添加或删除时，都可以在 GitHub Desktop 中看到例如我在 img 中添加了一张图片 avatar-demo.png 添加了一张图片就可以在看到GitHub Desktop显示了我的修改保存修改只要按 Commit to master，然后可以写上你的修改说明同步将修改同步到 GitHub 远程仓库上只需要一步：点击右上角的同步按钮完成打开你的GitHub上的仓库，你就可以看到已经和本地同步了可以看到你提交的详情： add img这样，你已经能轻松管理自己的博客了。想上传头像，背景，或者是删掉你不要的图片（我的头像😏）已经是 so eazy了吧~注意你在 GitHub 网站上进行 Commit 操作后，需要在GitHub Desktop上按一下 同步按键 才能同步网站上的修改到你的本地。修改个人介绍修改个人介绍需要修改根目录下的 about.html 文件看不懂 HTML 标签？没关系，对照着修改就好了~ 还有注意这个有中英介绍常见问题最近有很多人给我提问题，我这边总结一下配置文件修改后没有效果刷新几遍浏览器就好了~不行的话，先清除浏览器缓存再试试。404错误  检查你的仓库名是否有按照要求填写  确定 Fork 的是不是我的仓库~修改CNAME文件，域名还是不变清除浏览器缓存就OK~其他问题直接在评论中提出来或私信我，我会一一替大家解决的😀其他最近有人往我的远程仓库不停的 push，一天连收几十封邮件！例如像这样的原因大多是直接Clone了我的仓库到本地，没有删除我的远程仓库地址，添加完自己的仓库地址后，一口气推送到所有远程仓库（包括我的😂）~打扰了我的工作和生活~所以，请不要往我的仓库上推送分支！我发现一个问题是，很多人每次修改博客的内容都commit一次到远程仓库，然后再查看修改结果，这样效率非常低！来，上车！在本地调试博客  注：下面的操作是在 Mac 终端进行的。Windows 环境下的配置请参考 @梦幻之云 提供的 这篇文章。有心的同学在 jekyll官网 就会发现 jekyll 的 提供的实例代码。~ $ gem install jekyll bundler~ $ jekyll new my-awesome-site~ $ cd my-awesome-site~/my-awesome-site $ bundle install~/my-awesome-site $ bundle exec jekyll serve# =&gt; 打开浏览器 http://localhost:4000这段命令创建了一个默认的 jekll 网站，然后在本机的 4000 窗口展示。聪明的你应该发现怎么做了吧~安装 jekyll和 jekyll bundler$ gem install jekyll$ gem install jekyll bundler进入你的 Blog 所在目录，然后创建本地服务器$ jekyll s然后会显示 Auto-regeneration: enabled for '/Users/baiying/Blog'Configuration file: /Users/baiying/Blog/_config.yml    Server address: http://127.0.0.1:4000/  Server running... press ctrl-c to stop.你就可以在 http://127.0.0.1:4000/ 看到你的博客，你对本地博客的修改都会在这个地址进行显示，这大大提高了对博客的配置效率。使用ctrl+c就可以停止 serveStar若本教程顺利帮你搭建了自己的个人博客，请不要 害羞，给我的 github仓库 点个 star 吧！因为最近发现 Fork 将近破百，加上直接 Clone 仓库的，保守估计已经帮助上百人成功的搭建了自己的博客，可是 Star 却仅仅只有 12！可能还是做的不够好吧！现在已经破百了，感谢大家的Star！别无他求，点个 Star 吧！心满意足！补充修改网站的 icon要修改如图所示的网站 icon：在博客 img 目录下找到并替换 favicon.ico 这个图标即可，图标尺寸为32x32。修改主页的座右铭最近有不少小伙伴私信我：如何修改主页的座右铭？就是这个：很简单，找到博客目录下的 index.html 文件，修改这句话就可以了。如何在博客文章中上插入图片博客的文章用的是 MarkDown 格式，如果没用过 MarkDown 真的 强烈推荐 花半个小时学习一下。MarkDown 中添加图片的形式是 :![](图片的URL)例如：![MarkDown示例图片](http://upload-images.jianshu.io/upload_images/2178672-eb2effd6b942a500.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)就会显示下面这张图片https://ws3.sinaimg.cn/large/006tNc79gy1fj9xhjzobbj30yg0my75z.jpg就是这张图片的URL，我们可以在浏览器输入这个URL找到或下载这张图片。所以，要在 MacDown 中插入图片，这张图片就需要上传到图床（网上），然后在引用这张图片的URL。将图片上传到图床Mac 上的图床神器：iPic直接在App Store上下载，谁用谁知道！使用方法很简单，直接拖动图片到 P 图标上，或者选中图片按快捷键 ⌘+U，就能请示上传。上传成功就能直接粘贴图片的URL。用 iPic 上传图片后，获取URL插入文章中就可以了。推荐几个好用软件MarkDown编辑器MacDown：可能是Mac上最好的MacDown编辑器了图片压缩工具ImageOptim对于我们的博客来说，图片越大，加载速度越慢。不信你用手机打开你的博客试试~所以有必要对我们上传到博客网站中的图片：指的是你的头像，首页背景图片，文章背景图片等。对于博客文章中插入的图片，其实也可以压缩了再上传。对博客中的所有图片进行压缩：看看压缩结果，最高的一张压缩了78.7%，这简直是太可怕了！好了，现在个人博客的加载速度估计要起飞了~最后要说个事情我在博客中的文章，你们可以保留，让更多需要帮助人的看到，当然也可以删除。但是，我发现居然有人把文章的作者改成了自己，然后当成自己的文章放在自己的博客上，这就令人感到气愤了。比如说向我请教问题的这位：我在博客中的每篇文章都是我一字一句敲出来的，转载的文章我也注明了出处，表示对原作者的尊重。同时也希望大家都能尊重我的付出。谢谢~]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> Blog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Hello 2017]]></title>
      <url>/2017/02/04/Hello-2017/</url>
      <content type="text"><![CDATA[  “🙉🙉🙉 ”前言BY 的 Blog 就这么开通了。本来打算在年前完成 Blog 的搭建，不曾料想踩了很多坑。。。跳过废话，直接看技术实现 2017 年，BY Blog 总算是搭建好了。最开始写博客是在简书这个平台上，简书确实不错，支持markdown在线编辑。在一次偶然间，听到我的好基友 阳阳 想搭建个人主页，觉得作为一个程序员，是应该倒腾倒腾自己的Blog，于是乎就开始了撸起袖子干了。正文接下来说说搭建这个博客的技术细节。正好之前就有关注过 GitHub Pages + Jekyll 快速 Building Blog 的技术方案，非常轻松时尚。其优点非常明显：  Markdown 带来的优雅写作体验  非常熟悉的 Git workflow ，Git Commit 即 Blog Post  利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机          如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了        Jekyll 的自定制非常容易，基本就是个模版引擎主题我直接 Downlosd 了 Hux的博客主题 的进行修改，简单粗暴，不过遇到了很多坑😂，好在都填完了。。。本地调试环境需要 gem install jekyll，结果 rubygem 的源居然被墙了，后来手动改成了我大淘宝的镜像源才成功，淘宝的源已经停止维护，换成了OSChina的源 https://gems.ruby-china.org/。后记最后，感谢 Hux 提供的的 Blog 主题如果你恰好逛到了这里，希望你也能喜欢这个博客主题，感兴趣的话可以自己动手搭建一个。—— BY 后记于 2017.2]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> 生活 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
